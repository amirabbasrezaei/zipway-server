generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(20)
  familyName  String?
  password    String?
  email       String?   @unique
  phoneNumber String    @unique
  role        role      @default(USER)
  loginCode   String?
  isVerified  Boolean   @default(false)
  credit      Int       @default(0)
  Payment     Payment[]
  Session     Session[]
  Ride        Ride[]
  createdAt   DateTime  @default(now())
  lastLogin   DateTime?
}

model Session {
  id         String   @id @default(uuid())
  expireDate DateTime @default(now())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}

model Payment {
  id                   Int       @id @default(autoincrement())
  payment_create_date  DateTime  @default(now())
  payment_success_date DateTime?
  userId               String
  trackId              String?   @unique
  status               Int?
  isPayed              Boolean   @default(false)
  servicePaymentId     String?   @unique
  paymentUrl           String?
  value                Int
  user                 User      @relation(fields: [userId], references: [id])
  cardNumber           String?
  paymentDescription   String?
}

model Ride {
  id                     String                  @id @default(uuid())
  originCoordinate       Float[]
  destinationCoordiante  DestinationCoordinate[]
  passenger              User[]
  finalPrice             Int?
  createdDate            DateTime                @default(now())
  finishDate             DateTime?
  originDescription      String
  destinationDescription String
  numberOfPassengers     Int?
  chosenServiceProvider  RideServiceProvider?
  snappPrices            SnappRide[]
  tapsiPrices            TapsiRide[]
  maximPrices            MaximRide[]
  Status                 RideStatus?
  commission             Int?
}

model DestinationCoordinate {
  ride      Ride    @relation(fields: [rideId], references: [id])
  rideId    String  @id
  latitude  Decimal
  longitude Decimal
}

enum RideStatus {
  FINDING_DRIVER
  ACCEPTED
  CANCELLED
  NOT_FOUND
  NOT_INITIATED
}

enum RideServiceProvider {
  SNAPP
  TAPSI
  MAXIM
}

model SnappRide {
  id          String   @id @default(uuid())
  snappRideId String?
  serviceType String
  Rider       Rider[]
  price       Int
  Ride        Ride?    @relation(fields: [rideId], references: [id])
  rideId      String
  isChosen    Boolean? @default(false)
}

model MaximRide {
  id          String   @id @default(uuid())
  maximRideId String?
  serviceType String
  price       Int
  Rider       Rider[]
  Ride        Ride?    @relation(fields: [rideId], references: [id])
  rideId      String
  isChosen    Boolean? @default(false)
}

model TapsiRide {
  id           String   @id @default(uuid())
  tapsiRideId  String?
  serviceType  String
  categoryType String
  token        String
  price        Int
  Rider        Rider[]
  Ride         Ride     @relation(fields: [rideId], references: [id])
  rideId       String
  isChosen     Boolean?
}

model Rider {
  id          String     @id @default(uuid())
  name        String
  imageUrl    String?
  phoneNumber String
  Car         Car?
  SnappRide   SnappRide? @relation(fields: [snappRideId], references: [id])
  snappRideId String?
  MaximRide   MaximRide? @relation(fields: [maximRideId], references: [id])
  maximRideId String?
  TapsiRide   TapsiRide? @relation(fields: [tapsiRideId], references: [id])
  tapsiRideId String?
}

model Car {
  id                String  @id @default(uuid())
  platePartA        Int
  platePartB        Int
  plateCcharacter   String
  plateProvinceCode Int
  plateImageUrl     String?
  color             String
  model             String
  Rider             Rider   @relation(fields: [riderId], references: [id])
  riderId           String  @unique
}

enum role {
  USER
  SUPERADMIN
}
